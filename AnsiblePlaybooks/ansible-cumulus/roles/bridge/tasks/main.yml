---
- name: check if node already configured for bridge component
  ansible.builtin.meta: end_host
  when: configured_bridge | default(false)

- name: build vlan mappings
  ansible.builtin.set_fact:
    vlan_mappings: "{{ vlan_mappings|default( [ { 'id': bridge_pvid } ] ) + [ { 'id': item.id , 'vni': [ { 'id': item.vni, 'flooding': {'enable': 'auto'} } ] } ] }}"
  with_items: "{{ vlans }}"

- name: build vlan mappings
  ansible.builtin.set_fact:
    vlan_mappings: "{{ vlan_mappings|default([] ) + [ { 'id': item , 'vni': [ { 'id': item, 'flooding': {'enable': 'auto'} } ] } ] }}"
  loop: "{{ range(vni_vlan_start, vni_vlan_end) | list() }}"

- name: Create new revision
  nvidia.nvue.config:
    state: new
  register: revision

- name: dump revision
  debug:
    msg: "{{ revision.revid }}"

- name: Configure bridge
  nvidia.nvue.bridge:
    state: merged
    revid: "{{ revision.revid }}"
    data:
      - id: bridge
        type: "vlan-aware"
        untagged: "{{ bridge_pvid }}"
        vlan: "{{ vlan_mappings }}"

- name: Apply new revision
  nvidia.nvue.config:
    state: apply
    revid: "{{ revision.revid }}"
    force: true
    wait: 60
  register: revision

- name: dump previous output
  debug:
    msg: "{{ revision }}"

- name: Read inventory
  ansible.builtin.include_vars:
    file: "host_vars/{{ fqdn }}.yml"
    name: host_temp_vars

- name: set configured bridge variable
  ansible.builtin.set_fact:
    temp_fact:
      configured_bridge: true

- name: combine into inventory
  ansible.builtin.set_fact:
    host_added_vars: "{{ host_temp_vars | ansible.builtin.combine(temp_fact) }}"

- name: Update inventory
  delegate_to: localhost
  ansible.builtin.copy:
    dest: "host_vars/{{ fqdn }}.yml"
    content: "{{ host_added_vars | to_nice_yaml }}"
