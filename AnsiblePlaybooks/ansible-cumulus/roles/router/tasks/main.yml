---
- ansible.builtin.include_tasks: "common/tasks/read_host_inventory.yml"
  when: remote_inventory is not defined

- name: check if node already configured for router component
  ansible.builtin.meta: end_host
  when: configured_router | default(true)  and remote_inventory["configured_router"]

- name: build north bgp_neighbors
  ansible.builtin.set_fact:
    bgp_neighbors: "{{ bgp_neighbors|default( [ ] ) + [ { 'id': item , 'peer_group': north_peer_group, 'type': 'unnumbered' } ] }}"
  with_items: "{{ north_interfaces | default([]) }}"

- name: build south bgp_neighbors
  ansible.builtin.set_fact:
    bgp_neighbors: "{{ bgp_neighbors|default( [ ] ) + [ { 'id': item , 'peer_group': south_peer_group, 'type': 'unnumbered',  } ] }}"
  with_items: "{{ south_interfaces | default([]) }}"

- name: setup ipv4 route exports
  ansible.builtin.set_fact:
    bgp_ipv4_networks: "{{ bgp_ipv4_networks|default([]) + [ { 'id': lo_ip } ] }}"
  when: lo_ip is defined

- name: setup ipv4 route exports
  ansible.builtin.set_fact:
    bgp_ipv4_networks: "{{ bgp_ipv4_networks|default([]) + [ { 'id': item.network } ] }}"
  with_items: "{{ vlan_interfaces | default([]) }}"
  when: item.network | ansible.utils.ipaddr('ipv4')

- name: setup ipv6 route exports
  ansible.builtin.set_fact:
    bgp_ipv6_networks: "{{ bgp_ipv6_networks|default([]) + [ { 'id': item.network } ] }}"
  with_items: "{{ vlan_interfaces | default([]) }}"
  when: item.network | ansible.utils.ipv6

- name: construct ipv6 address family dict
  ansible.builtin.set_fact:
    bgp_ipv6_address_family:
      ipv6_unicast:
        network: "{{ bgp_ipv6_networks }}"
  when: bgp_ipv6_networks is defined

- name: construct ipv4 address family dict
  ansible.builtin.set_fact:
    bgp_ipv4_address_family:
      ipv4_unicast:
        network: "{{ bgp_ipv4_networks }}"
  when: bgp_ipv4_networks is defined

- name: Construct Address Family dict
  ansible.builtin.set_fact:
    bgp_address_family:
      ipv4_unicast:
        enable: 'on'
        redistribute:
          # connected:
          #   enable: 'on'
          static:
            enable: 'on'
      l2vpn_evpn:
        enable: 'on'
      ipv6_unicast:
        enable: 'on'
        redistribute:
          # connected:
          #   enable: 'on'
          static:
            enable: 'on'

- name: merge in ipv4 and ipv6 address families
  ansible.builtin.set_fact:
    bgp_address_family: "{{ bgp_address_family | ansible.builtin.combine(bgp_ipv4_address_family | default({}), bgp_ipv6_address_family | default({}), recursive=true) }}"

- name: build north rules
  ansible.builtin.set_fact:
    north_rules_ipv4: "{{ north_rules_ipv4 | default([]) + [{ 'id': item.index, 'action': 'permit', 'match': [ { 'id': item.id}] }] }}"
  with_items: "{{ north_prefix_list | default([]) }}"
  when:
    - item.max_prefix_len is not defined
    - item.id | ansible.utils.ipv4
- name: build north rules
  ansible.builtin.set_fact:
    north_rules_ipv4: "{{ north_rules_ipv4 | default([]) + [{ 'id': item.index, 'action': 'permit', 'match': [ { 'id': item.id, 'max_prefix_len': item.max_prefix_len }] }] }}"
  with_items: "{{ north_prefix_list | default([]) }}"
  when:
    - item.max_prefix_len is defined
    - item.id | ansible.utils.ipv4

- name: build south rules
  ansible.builtin.set_fact:
    south_rules_ipv4: "{{ south_rules_ipv4 | default([]) + [{ 'id': item.index, 'action': 'permit', 'match': [ { 'id': item.id}] }] }}"
  with_items: "{{ south_prefix_list | default([]) }}"
  when:
    - item.max_prefix_len is not defined
    - item.id | ansible.utils.ipv4
- name: build south rules
  ansible.builtin.set_fact:
    south_rules_ipv4: "{{ south_rules_ipv4 | default([]) + [{ 'id': item.index, 'action': 'permit', 'match': [ { 'id': item.id, 'max_prefix_len': item.max_prefix_len }] }] }}"
  with_items: "{{ south_prefix_list | default ([]) }}"
  when:
    - item.max_prefix_len is defined
    - item.id | ansible.utils.ipv4

- name: build north prefix list dict
  ansible.builtin.set_fact:
    north_ipv4_prefix_list_dict:
        - id: "{{ north_peer_group }}_prefix_list_ipv4"
          rule: "{{ north_rules_ipv4 }}"
  when: north_rules_ipv4 is defined

- name: build south prefix list dict
  ansible.builtin.set_fact:
    south_ipv4_prefix_list_dict:
      - id: "{{ south_peer_group}}_prefix_list_ipv4"
        rule: "{{ south_rules_ipv4 }}"
  when: south_rules_ipv4 is defined

- name: combine prefix lists
  ansible.builtin.set_fact:
    prefix_list_ipv4_dict: "{{ south_ipv4_prefix_list_dict | default([]) + north_ipv4_prefix_list_dict | default([])}}"
  when: (south_ipv4_prefix_list_dict is defined) or (north_ipv4_prefix_list_dict is defined)

- name: build north rules
  ansible.builtin.set_fact:
    north_rules_ipv6: "{{ north_rules_ipv6 | default([]) + [{ 'id': item.index, 'action': 'permit', 'match': [ { 'id': item.id}] }] }}"
  with_items: "{{ north_prefix_list | default([]) }}"
  when:
    - item.max_prefix_len is not defined
    - item.id | ansible.utils.ipv6
- name: build north rules
  ansible.builtin.set_fact:
    north_rules_ipv6: "{{ north_rules_ipv6 | default([]) + [{ 'id': item.index, 'action': 'permit', 'match': [ { 'id': item.id, 'max_prefix_len': item.max_prefix_len }] }] }}"
  with_items: "{{ north_prefix_list | default([]) }}"
  when:
    - item.max_prefix_len is defined
    - item.id | ansible.utils.ipv6

- name: build south rules
  ansible.builtin.set_fact:
    south_rules_ipv6: "{{ south_rules_ipv6 | default([]) + [{ 'id': item.index, 'action': 'permit', 'match': [ { 'id': item.id}] }] }}"
  with_items: "{{ south_prefix_list | default([]) }}"
  when:
    - item.max_prefix_len is not defined
    - item.id | ansible.utils.ipv6
- name: build south rules
  ansible.builtin.set_fact:
    south_rules_ipv6: "{{ south_rules_ipv6 | default([]) + [{ 'id': item.index, 'action': 'permit', 'match': [ { 'id': item.id, 'max_prefix_len': item.max_prefix_len }] }] }}"
  with_items: "{{ south_prefix_list | default ([]) }}"
  when:
    - item.max_prefix_len is defined
    - item.id | ansible.utils.ipv6

- name: build north prefix list dict
  ansible.builtin.set_fact:
    north_ipv6_prefix_list_dict:
        - id: "{{ north_peer_group }}_prefix_list_ipv6"
          rule: "{{ north_rules_ipv6 }}"
  when: north_rules_ipv6 is defined

- name: build south prefix list dict
  ansible.builtin.set_fact:
    south_ipv6_prefix_list_dict:
      - id: "{{ south_peer_group}}_prefix_list_ipv6"
        rule: "{{ south_rules_ipv6 }}"
  when: south_rules_ipv6 is defined

- name: combine prefix lists
  ansible.builtin.set_fact:
    prefix_list_ipv6_dict: "{{ south_ipv6_prefix_list_dict | default([]) + north_ipv6_prefix_list_dict | default([])}}"
  when: (south_ipv6_prefix_list_dict is defined) or (north_ipv6_prefix_list_dict is defined)



- name: combine prefix lists
  ansible.builtin.set_fact:
    prefix_lists: "{{ prefix_list_ipv6_dict | default([]) + prefix_list_ipv4_dict | default([]) }}"
  when: (prefix_list_ipv6_dict is defined) or (prefix_list_ipv4_dict is defined)

- name: build north policy route_map
  ansible.builtin.set_fact:
    north_ipv4_route_map:
      - id: "{{ north_peer_group }}_ipv4_route_map"
        rule:
          - id: 10
            match:
              type: "ipv4"
              ip_prefix_list: "{{ north_peer_group }}_prefix_list_ipv4"
            action:
              - id: "permit"
  when: north_ipv4_prefix_list_dict is defined

- name: build south policy route_map
  ansible.builtin.set_fact:
    south_ipv4_route_map:
      - id: "{{ south_peer_group }}_ipv4_route_map"
        rule:
          - id: 20
            match:
              type: "ipv4"
              ip_prefix_list: "{{ south_peer_group }}_prefix_list_ipv4"
            action:
              - id: "permit"
  when: south_ipv4_prefix_list_dict is defined

- name: build north policy route_map
  ansible.builtin.set_fact:
    north_ipv6_route_map:
      - id: "{{ north_peer_group }}_ipv6_route_map"
        rule:
          - id: 30
            match:
              type: "ipv6"
              ip_prefix_list: "{{ north_peer_group }}_prefix_list_ipv6"
            action:
              - id: "permit"
  when: north_ipv6_prefix_list_dict is defined

- name: build south policy route_map
  ansible.builtin.set_fact:
    south_ipv6_route_map:
      - id: "{{ south_peer_group }}_ipv6_route_map"
        rule:
          - id: 40
            match:
              type: "ipv6"
              ip_prefix_list: "{{ south_peer_group }}_prefix_list_ipv6"
            action:
              - id: "permit"
  when: south_ipv6_prefix_list_dict is defined

- name: combine into route maps
  ansible.builtin.set_fact:
    route_maps: "{{  south_ipv6_route_map | default([]) +  south_ipv4_route_map | default([]) +  north_ipv6_route_map | default([]) +  north_ipv4_route_map | default({}) }}"
  when: (south_ipv6_route_map is defined) or (south_ipv4_route_map is defined) or (north_ipv6_route_map is defined) or (north_ipv4_route_map is defined)

- name: combine into policy dict
  ansible.builtin.set_fact:
    policy_dict:
      prefix_list: "{{ prefix_lists }}"
      route_map: "{{ route_maps }}"
  when:
    - prefix_lists is defined
    - route_maps is defined

- ansible.builtin.include_tasks: "common/tasks/new_revision.yml"

- name: Enable Router daemons
  nvidia.nvue.router:
    state: merged
    revid: "{{ revision.revid }}"
    data:
      bgp:
        enable: "on"
        graceful_restart:
          mode: "full"
      vrr:
        enable: "on"

- name: Add router policies
  nvidia.nvue.router:
    state: merged
    revid: "{{ revision.revid }}"
    data:
      policy: "{{ policy_dict }}"
  when:
    - policy_dict is defined

- ansible.builtin.include_tasks: "common/tasks/apply_revision.yml"

- ansible.builtin.include_tasks: "common/tasks/new_revision.yml"

- name: build north ipv4 peer group address_family dict
  ansible.builtin.set_fact:
    north_peer_group_ipv4_route_map_dict:
      ipv4_unicast:
        policy:
          inbound:
            route_map: "{{ north_ipv4_route_map }}"
  when: north_ipv4_route_map is defined

- name: build north ipv6 peer group address_family dict
  ansible.builtin.set_fact:
    north_peer_group_ipv6_route_map_dict:
      ipv6_unicast:
        policy:
          inbound:
            route_map: "{{ north_ipv6_route_map }}"
  when: north_ipv6_route_map is defined

- name: build north ipv4 peer group address_family dict
  ansible.builtin.set_fact:
    south_peer_group_ipv4_route_map_dict:
      ipv4_unicast:
        policy:
          outbound:
            route_map: "{{ south_ipv4_route_map }}"
  when: south_ipv4_route_map is defined

- name: build north ipv6 peer group address_family dict
  ansible.builtin.set_fact:
    south_peer_group_ipv6_route_map_dict:
      ipv6_unicast:
        policy:
          outbound:
            route_map: "{{ south_ipv6_route_map }}"
  when: south_ipv6_route_map is defined

- name: combine north route_maps
  ansible.builtin.set_fact:
    north_address_family: "{{ south_peer_group_ipv6_route_map_dict | default({}) | combine(south_peer_group_ipv4_route_map_dict | default({}), north_peer_group_ipv4_route_map_dict | default({}), north_peer_group_ipv6_route_map_dict | default({}) , recursive=true)}}"
  when: (south_peer_group_ipv6_route_map_dict is defined) or (south_peer_group_ipv4_route_map_dict is defined) or (north_peer_group_ipv6_route_map_dict is defined) or (north_peer_group_ipv4_route_map_dict is defined)

- name: configure bgp router
  nvidia.nvue.vrf:
    data:
      - id: default
        evpn:
          enable: 'on'
        router:
          bgp:
            enable: 'on'
            router_id: "{{ bgp_router_id }}"
            autonomous_system: "{{ bgp_asn }}"
            neighbor: "{{ bgp_neighbors }}"
            address_family: "{{ bgp_address_family }}"
            peer_group:
              - id: "{{ south_peer_group }}"
                remote_as: "{{ south_remote_as }}"
                capabilities:
                  extended_nexthop: 'on'
                address_family:
                  l2vpn_evpn:
                    enable: 'on'
              - id: "{{ north_peer_group }}"
                remote_as: "{{ north_remote_as }}"
                capabilities:
                  extended_nexthop: 'on'
                address_family: "{{ { 'l2vpn_evpn': {'enable': 'on'} } | combine(north_address_family | default({}) ) }}"
    state: merged
    revid: "{{ revision.revid }}"

- ansible.builtin.include_tasks: "common/tasks/apply_revision.yml"

- name: set configured_router variable
  ansible.builtin.set_fact:
    temp_fact:
      configured_router: true

- ansible.builtin.include_tasks: "common/tasks/write_host_inventory.yml"
